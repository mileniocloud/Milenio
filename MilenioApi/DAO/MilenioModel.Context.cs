

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------


namespace MilenioApi.DAO
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class MilenioCloudEntities : DbContext
{
    public MilenioCloudEntities()
        : base("name=MilenioCloudEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Actividad_Economica> Actividad_Economica { get; set; }

    public virtual DbSet<Agenda_Profesional> Agenda_Profesional { get; set; }

    public virtual DbSet<CIE> CIE { get; set; }

    public virtual DbSet<Cita> Cita { get; set; }

    public virtual DbSet<Consultorio> Consultorio { get; set; }

    public virtual DbSet<Consultorio_Especialidad> Consultorio_Especialidad { get; set; }

    public virtual DbSet<Cups> Cups { get; set; }

    public virtual DbSet<Departamento> Departamento { get; set; }

    public virtual DbSet<Detalle_Agenda> Detalle_Agenda { get; set; }

    public virtual DbSet<Entidad> Entidad { get; set; }

    public virtual DbSet<Entidad_Usuario> Entidad_Usuario { get; set; }

    public virtual DbSet<Especialidad> Especialidad { get; set; }

    public virtual DbSet<Especialidad_Cup_Entidad> Especialidad_Cup_Entidad { get; set; }

    public virtual DbSet<Especialidad_Entidad> Especialidad_Entidad { get; set; }

    public virtual DbSet<Especialidad_Profesional> Especialidad_Profesional { get; set; }

    public virtual DbSet<GenericError> GenericError { get; set; }

    public virtual DbSet<Horario_Agenda> Horario_Agenda { get; set; }

    public virtual DbSet<Licencia> Licencia { get; set; }

    public virtual DbSet<Medicamentos_Esenciales> Medicamentos_Esenciales { get; set; }

    public virtual DbSet<Menu> Menu { get; set; }

    public virtual DbSet<Municipio> Municipio { get; set; }

    public virtual DbSet<Ocupacion> Ocupacion { get; set; }

    public virtual DbSet<Paciente> Paciente { get; set; }

    public virtual DbSet<Poblado> Poblado { get; set; }

    public virtual DbSet<Rol> Rol { get; set; }

    public virtual DbSet<Rol_Usuario> Rol_Usuario { get; set; }

    public virtual DbSet<Rol_Vista_Entidad> Rol_Vista_Entidad { get; set; }

    public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }

    public virtual DbSet<Telefono> Telefono { get; set; }

    public virtual DbSet<Tipo_Identificacion> Tipo_Identificacion { get; set; }

    public virtual DbSet<Tipo_Profesional> Tipo_Profesional { get; set; }

    public virtual DbSet<Tipo_Vinculacion> Tipo_Vinculacion { get; set; }

    public virtual DbSet<Ubicacion> Ubicacion { get; set; }

    public virtual DbSet<Usuario> Usuario { get; set; }

    public virtual DbSet<Vistas> Vistas { get; set; }


    public virtual int Validate_Create_User(string login, string identificacion, string email, string registroprofesional)
    {

        var loginParameter = login != null ?
            new ObjectParameter("login", login) :
            new ObjectParameter("login", typeof(string));


        var identificacionParameter = identificacion != null ?
            new ObjectParameter("identificacion", identificacion) :
            new ObjectParameter("identificacion", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("email", email) :
            new ObjectParameter("email", typeof(string));


        var registroprofesionalParameter = registroprofesional != null ?
            new ObjectParameter("registroprofesional", registroprofesional) :
            new ObjectParameter("registroprofesional", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Validate_Create_User", loginParameter, identificacionParameter, emailParameter, registroprofesionalParameter);
    }

}

}

